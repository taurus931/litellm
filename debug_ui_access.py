#!/usr/bin/env python3
"""
Script ƒë·ªÉ ki·ªÉm tra Admin UI v√† c√°c endpoint li√™n quan
"""

import requests
import webbrowser
import time

# Configuration
PROXY_URL = "http://localhost:4000"
MASTER_KEY = "sk-1234"
UI_USERNAME = "admin"
UI_PASSWORD = "sk-1234"

def check_proxy_health():
    """Ki·ªÉm tra proxy server c√≥ ƒëang ch·∫°y kh√¥ng"""
    try:
        response = requests.get(f"{PROXY_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Proxy server ƒëang ch·∫°y")
            return True
        else:
            print(f"‚ùå Proxy server tr·∫£ v·ªÅ status: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi proxy server: {e}")
        return False

def check_ui_accessibility():
    """Ki·ªÉm tra UI c√≥ accessible kh√¥ng"""
    try:
        response = requests.get(f"{PROXY_URL}/ui", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Admin UI accessible")
            return True
        else:
            print(f"‚ùå Admin UI tr·∫£ v·ªÅ status: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Kh√¥ng th·ªÉ truy c·∫≠p Admin UI: {e}")
        return False

def check_swagger_ui():
    """Ki·ªÉm tra Swagger UI"""
    try:
        response = requests.get(f"{PROXY_URL}/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Swagger UI accessible")
            return True
        else:
            print(f"‚ùå Swagger UI tr·∫£ v·ªÅ status: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Kh√¥ng th·ªÉ truy c·∫≠p Swagger UI: {e}")
        return False

def test_login():
    """Test login endpoint"""
    try:
        # Prepare login data
        login_data = {
            "username": UI_USERNAME,
            "password": UI_PASSWORD
        }
        
        response = requests.post(
            f"{PROXY_URL}/login",
            data=login_data,
            timeout=5
        )
        
        if response.status_code == 200:
            print("‚úÖ Login endpoint ho·∫°t ƒë·ªông")
            return True
        else:
            print(f"‚ùå Login failed: {response.status_code} - {response.text}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªói khi test login: {e}")
        return False

def check_models_endpoint():
    """Ki·ªÉm tra models endpoint"""
    try:
        headers = {
            "Authorization": f"Bearer {MASTER_KEY}"
        }
        
        response = requests.get(
            f"{PROXY_URL}/v1/models",
            headers=headers,
            timeout=5
        )
        
        if response.status_code == 200:
            models = response.json()
            print(f"‚úÖ Models endpoint ho·∫°t ƒë·ªông - t√¨m th·∫•y {len(models.get('data', []))} models")
            return True
        else:
            print(f"‚ùå Models endpoint failed: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra models: {e}")
        return False

def open_admin_ui():
    """M·ªü Admin UI trong browser"""
    try:
        print(f"üåê ƒêang m·ªü Admin UI t·∫°i: {PROXY_URL}/ui")
        print(f"üìù Username: {UI_USERNAME}")
        print(f"üìù Password: {UI_PASSWORD}")
        webbrowser.open(f"{PROXY_URL}/ui")
        return True
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ m·ªü browser: {e}")
        return False

def open_swagger_ui():
    """M·ªü Swagger UI trong browser"""
    try:
        print(f"üìö ƒêang m·ªü Swagger UI t·∫°i: {PROXY_URL}/")
        webbrowser.open(f"{PROXY_URL}/")
        return True
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ m·ªü Swagger UI: {e}")
        return False

def main():
    """Main function"""
    print("üöÄ Ki·ªÉm tra Admin UI v√† c√°c endpoint...")
    print("=" * 50)
    
    # 1. Ki·ªÉm tra proxy server
    print("1. Ki·ªÉm tra proxy server...")
    if not check_proxy_health():
        print("‚ùå Proxy server kh√¥ng ch·∫°y. H√£y ch·∫°y docker-compose up tr∆∞·ªõc.")
        return
    
    # 2. Ki·ªÉm tra models endpoint
    print("\n2. Ki·ªÉm tra models endpoint...")
    check_models_endpoint()
    
    # 3. Ki·ªÉm tra Swagger UI
    print("\n3. Ki·ªÉm tra Swagger UI...")
    check_swagger_ui()
    
    # 4. Ki·ªÉm tra Admin UI
    print("\n4. Ki·ªÉm tra Admin UI...")
    check_ui_accessibility()
    
    # 5. Test login endpoint
    print("\n5. Test login endpoint...")
    test_login()
    
    # 6. M·ªü browser
    print("\n6. M·ªü Admin UI trong browser...")
    open_admin_ui()
    
    print("\n7. M·ªü Swagger UI trong browser...")
    open_swagger_ui()
    
    print("\n" + "=" * 50)
    print("‚úÖ Ho√†n th√†nh ki·ªÉm tra!")
    print("\nüìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Admin UI:")
    print("1. Truy c·∫≠p: http://localhost:4000/ui")
    print(f"2. ƒêƒÉng nh·∫≠p v·ªõi Username: {UI_USERNAME}, Password: {UI_PASSWORD}")
    print("3. V√†o m·ª•c 'Spend Analytics' ƒë·ªÉ debug spend tracking")
    print("4. T·∫°o API keys v√† test spend tracking")
    print("\nüìö Swagger UI: http://localhost:4000/")
    print("   - Xem t·∫•t c·∫£ API endpoints")
    print("   - Test API tr·ª±c ti·∫øp t·ª´ browser")

if __name__ == "__main__":
    main()
